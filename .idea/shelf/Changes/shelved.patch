Index: src/main/java/BrawlerRankingFetcher.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/BrawlerRankingFetcher.java b/src/main/java/BrawlerRankingFetcher.java
new file mode 100644
--- /dev/null	(date 1743489794473)
+++ b/src/main/java/BrawlerRankingFetcher.java	(date 1743489794473)
@@ -0,0 +1,49 @@
+// ‚úÖ ÏâòÎ¶¨ Í∏ÄÎ°úÎ≤å Îû≠ÌÇπ ÌÉúÍ∑∏ ÏûêÎèô ÏàòÏßë + Ï∂úÎ†•Ïö© ÏΩîÎìú
+// - Supercell Brawl Stars API ÌôúÏö©
+// - gson, java.net, java.io ÏÇ¨Ïö©
+
+import com.google.gson.*;
+import java.io.*;
+import java.net.*;
+import java.util.*;
+
+public class BrawlerRankingFetcher {
+    private static final String API_KEY = "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiIsImtpZCI6IjI4YTMxOGY3LTAwMDAtYTFlYi03ZmExLTJjNzQzM2M2Y2NhNSJ9.eyJpc3MiOiJzdXBlcmNlbGwiLCJhdWQiOiJzdXBlcmNlbGw6Z2FtZWFwaSIsImp0aSI6ImQ2MTI5MGIwLTczODQtNDQxNC05OTYxLTc0YWM5MTU5MTdlMCIsImlhdCI6MTc0MzQ4OTQzNCwic3ViIjoiZGV2ZWxvcGVyL2UzYWI0ZGM4LWI3NzctODMyZi04YTRhLTBkMTAzZDQyMWE0MCIsInNjb3BlcyI6WyJicmF3bHN0YXJzIl0sImxpbWl0cyI6W3sidGllciI6ImRldmVsb3Blci9zaWx2ZXIiLCJ0eXBlIjoidGhyb3R0bGluZyJ9LHsiY2lkcnMiOlsiMjExLjIzOC4xMDkuMTY0Il0sInR5cGUiOiJjbGllbnQifV19._1W3y5ERJnP5BFzTQ4U9WYaQ9KQtjCdzt_ZyoYvSCVajB_1QubfiZF_etX2MlmC-QhUN6APLt4DrXtR249o34w";
+    private static final String BRAWLER_ID = "16000000"; // Shelly ID
+
+    public static void main(String[] args) {
+        try {
+            String url = "https://api.brawlstars.com/v1/rankings/global/brawlers/" + BRAWLER_ID;
+            HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
+            conn.setRequestProperty("Authorization", API_KEY);
+            conn.setRequestProperty("Accept", "application/json");
+
+            BufferedReader in = new BufferedReader(new InputStreamReader(
+                    conn.getResponseCode() >= 400 ? conn.getErrorStream() : conn.getInputStream()
+            ));
+            StringBuilder response = new StringBuilder();
+            String line;
+            while ((line = in.readLine()) != null) {
+                response.append(line);
+            }
+            in.close();
+
+            JsonObject json = JsonParser.parseString(response.toString()).getAsJsonObject();
+            JsonArray rankings = json.getAsJsonArray("items");
+
+            System.out.println("‚úÖ Shelly Í∏ÄÎ°úÎ≤å Îû≠ÌÇπ ÏÉÅÏúÑ ÌÉúÍ∑∏Îì§:");
+            for (JsonElement item : rankings) {
+                JsonObject player = item.getAsJsonObject();
+                String name = player.get("name").getAsString();
+                String tag = player.get("tag").getAsString().replace("#", "");
+                int trophies = player.get("trophies").getAsInt();
+
+                System.out.println("- " + name + " (" + tag + "): " + trophies + " Ìä∏Î°úÌîº");
+                // Ïù¥ ÌÉúÍ∑∏Î•º battlelog Ï°∞ÌöåÏö©ÏúºÎ°ú Ï†ÄÏû•Ìï¥ÎëêÎ©¥ Îê®
+            }
+        } catch (Exception e) {
+            System.out.println("‚ùå Ïò§Î•ò Î∞úÏÉù: " + e.getMessage());
+            e.printStackTrace();
+        }
+    }
+}
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1743323821462)
+++ b/.idea/misc.xml	(date 1743323821462)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="FrameworkDetectionExcludesConfiguration">
+    <file type="web" url="file://$PROJECT_DIR$" />
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="corretto-17" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/BattleTypeChecker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/BattleTypeChecker.java b/src/main/java/BattleTypeChecker.java
new file mode 100644
--- /dev/null	(date 1743489451977)
+++ b/src/main/java/BattleTypeChecker.java	(date 1743489451977)
@@ -0,0 +1,61 @@
+// ‚úÖ Î™©Ï†Å: ÎÇ¥ ÌîåÎ†àÏù¥Ïñ¥ ÌÉúÍ∑∏ÏóêÏÑú ÏµúÍ∑º Ï†ÑÏ†ÅÏùò Í≤ΩÍ∏∞ Ïú†ÌòïÏùÑ ÌôïÏù∏ÌïòÎäî ÏΩîÎìú (SQL Ï†ÄÏû• ÏóÜÏùå)
+// ‚úÖ Ï∂úÎ†•: Í∞Å Í≤ΩÍ∏∞Ïùò mode + type ÏùÑ Ï∂úÎ†• ‚Üí Ìä∏Î°úÌîºÏ†Ñ / ÌååÏõåÎ¶¨Í∑∏ / Ï±îÌîºÏñ∏Ïã≠ Ïó¨Î∂Ä ÌôïÏù∏
+
+import com.google.gson.*;
+import java.io.*;
+import java.net.*;
+
+public class BattleTypeChecker {
+    private static final String API_KEY = "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiIsImtpZCI6IjI4YTMxOGY3LTAwMDAtYTFlYi03ZmExLTJjNzQzM2M2Y2NhNSJ9.eyJpc3MiOiJzdXBlcmNlbGwiLCJhdWQiOiJzdXBlcmNlbGw6Z2FtZWFwaSIsImp0aSI6ImQ2MTI5MGIwLTczODQtNDQxNC05OTYxLTc0YWM5MTU5MTdlMCIsImlhdCI6MTc0MzQ4OTQzNCwic3ViIjoiZGV2ZWxvcGVyL2UzYWI0ZGM4LWI3NzctODMyZi04YTRhLTBkMTAzZDQyMWE0MCIsInNjb3BlcyI6WyJicmF3bHN0YXJzIl0sImxpbWl0cyI6W3sidGllciI6ImRldmVsb3Blci9zaWx2ZXIiLCJ0eXBlIjoidGhyb3R0bGluZyJ9LHsiY2lkcnMiOlsiMjExLjIzOC4xMDkuMTY0Il0sInR5cGUiOiJjbGllbnQifV19._1W3y5ERJnP5BFzTQ4U9WYaQ9KQtjCdzt_ZyoYvSCVajB_1QubfiZF_etX2MlmC-QhUN6APLt4DrXtR249o34w";
+    private static final String PLAYER_TAG = "V9V8QG2V"; // # ÎπºÍ≥† ÎåÄÎ¨∏Ïûê
+
+    public static void main(String[] args) {
+        try {
+            String url = "https://api.brawlstars.com/v1/players/%23" + PLAYER_TAG + "/battlelog";
+            HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
+            conn.setRequestProperty("Authorization", API_KEY);
+            conn.setRequestProperty("Accept", "application/json");
+
+            BufferedReader in = new BufferedReader(new InputStreamReader(
+                    conn.getResponseCode() >= 400 ? conn.getErrorStream() : conn.getInputStream()
+            ));
+            StringBuilder response = new StringBuilder();
+            String line;
+            while ((line = in.readLine()) != null) {
+                response.append(line);
+            }
+            in.close();
+
+            JsonObject json = JsonParser.parseString(response.toString()).getAsJsonObject();
+
+            if (!json.has("items")) {
+                System.out.println("‚ùå ÏùëÎãµÏóê itemsÍ∞Ä ÏóÜÏäµÎãàÎã§.");
+                return;
+            }
+
+            JsonArray matches = json.getAsJsonArray("items");
+            System.out.println("\nüßæ ÏµúÍ∑º Ï†ÑÏ†Å Ïú†Ìòï ÌôïÏù∏ Í≤∞Í≥º:");
+
+            for (JsonElement matchElement : matches) {
+                JsonObject match = matchElement.getAsJsonObject();
+                JsonObject battle = match.getAsJsonObject("battle");
+
+                String mode = battle.has("mode") ? battle.get("mode").getAsString() : "(Ïïå Ïàò ÏóÜÏùå)";
+                String type = battle.has("type") ? battle.get("type").getAsString() : "(Ïïå Ïàò ÏóÜÏùå)";
+
+                String label = switch (type) {
+                    case "ranked" -> "üèÜ Ìä∏Î°úÌîºÏ†Ñ";
+                    case "championshipChallenge" -> "‚öîÔ∏è Ï±îÌîºÏñ∏Ïã≠ Í≤ΩÍ∏∞";
+                    case "powerLeague" -> "üéØ ÌååÏõåÎ¶¨Í∑∏";
+                    default -> "‚ùì Í∏∞ÌÉÄ";
+                };
+
+                System.out.printf("- Î™®Îìú: %-15s | Ïú†Ìòï: %-25s ‚Üí %s\n", mode, type, label);
+            }
+
+        } catch (Exception e) {
+            System.out.println("‚ùå Ïò§Î•ò Î∞úÏÉù: " + e.getMessage());
+            e.printStackTrace();
+        }
+    }
+}
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1743405778346)
+++ b/.idea/vcs.xml	(date 1743405778346)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/org/example/BrawlerBattleSaver.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/BrawlerBattleSaver.java b/src/main/java/org/example/BrawlerBattleSaver.java
new file mode 100644
--- /dev/null	(date 1743400173853)
+++ b/src/main/java/org/example/BrawlerBattleSaver.java	(date 1743400173853)
@@ -0,0 +1,101 @@
+// ‚úÖ ÌïÑÏöîÌïú ÎùºÏù¥Î∏åÎü¨Î¶¨:
+// - Gson (com.google.code.gson:gson:2.10.1)
+// - MySQL Connector (mysql:mysql-connector-java:8.0.33)
+
+import com.google.gson.*;
+import java.io.*;
+import java.net.*;
+import java.sql.*;
+
+public class BrawlerBattleSaver {
+    private static final String API_KEY = "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiIsImtpZCI6IjI4YTMxOGY3LTAwMDAtYTFlYi03ZmExLTJjNzQzM2M2Y2NhNSJ9.eyJpc3MiOiJzdXBlcmNlbGwiLCJhdWQiOiJzdXBlcmNlbGw6Z2FtZWFwaSIsImp0aSI6IjNjNWY3NzJiLTc5N2EtNDk1Mi1iNDdjLTZhYzNjMmY5MTE3YSIsImlhdCI6MTc0MzQwMDA4Mywic3ViIjoiZGV2ZWxvcGVyL2UzYWI0ZGM4LWI3NzctODMyZi04YTRhLTBkMTAzZDQyMWE0MCIsInNjb3BlcyI6WyJicmF3bHN0YXJzIl0sImxpbWl0cyI6W3sidGllciI6ImRldmVsb3Blci9zaWx2ZXIiLCJ0eXBlIjoidGhyb3R0bGluZyJ9LHsiY2lkcnMiOlsiMS4yMzcuMjM2Ljc2Il0sInR5cGUiOiJjbGllbnQifV19.RFrIrVYEhbg2enjZcr9S92VB8b0GbfguLew86AtG9GJzHlrbGIjBWpnf_T4ubdnXy7WZoOXLv5ZPbm4CVs-xYQ";
+    private static final String PLAYER_TAG = "8RRLGU9JR"; // # ÏóÜÏù¥ ÏûÖÎ†•
+    private static final String TARGET_BRAWLER = "SHELLY";
+
+    private static final String DB_URL = "jdbc:mysql://localhost:3306/brawlstars?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true";
+    private static final String DB_USER = "root";
+    private static final String DB_PASSWORD = "1111";
+
+    public static void main(String[] args) {
+        try {
+            // API ÏöîÏ≤≠
+            String url = "https://api.brawlstars.com/v1/players/%23" + PLAYER_TAG + "/battlelog";
+            HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
+            conn.setRequestProperty("Authorization", API_KEY);
+            conn.setRequestProperty("Accept", "application/json");
+
+            BufferedReader in = new BufferedReader(new InputStreamReader(
+                    conn.getResponseCode() >= 400 ? conn.getErrorStream() : conn.getInputStream()
+            ));
+            StringBuilder response = new StringBuilder();
+            String line;
+            while ((line = in.readLine()) != null) {
+                response.append(line);
+            }
+            in.close();
+            System.out.println("üì¶ ÏùëÎãµ ÎÇ¥Ïö©: " + response.toString());
+
+
+            JsonObject json = JsonParser.parseString(response.toString()).getAsJsonObject();
+
+            if (!json.has("items") || !json.get("items").isJsonArray()) {
+                System.out.println("‚ùå ÏùëÎãµÏóê items Î∞∞Ïó¥Ïù¥ ÏóÜÏäµÎãàÎã§.");
+                return;
+            }
+
+            JsonArray matches = json.getAsJsonArray("items");
+            Connection dbConn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
+            String insertSQL = "INSERT INTO brawler_matches (brawler, result, map, mode, gadget, starpower) VALUES (?, ?, ?, ?, ?, ?)";
+            PreparedStatement pstmt = dbConn.prepareStatement(insertSQL);
+
+            for (JsonElement matchElement : matches) {
+                JsonObject match = matchElement.getAsJsonObject();
+
+                String map = match.has("event") && match.get("event").getAsJsonObject().has("map")
+                        ? match.get("event").getAsJsonObject().get("map").getAsString() : "";
+                String mode = match.has("event") && match.get("event").getAsJsonObject().has("mode")
+                        ? match.get("event").getAsJsonObject().get("mode").getAsString() : "";
+
+                JsonObject battle = match.has("battle") ? match.getAsJsonObject("battle") : new JsonObject();
+                String result = battle.has("result") ? battle.get("result").getAsString() : "";
+
+                if (battle.has("teams")) {
+                    JsonArray teams = battle.getAsJsonArray("teams");
+
+                    for (JsonElement team : teams) {
+                        for (JsonElement playerElem : team.getAsJsonArray()) {
+                            JsonObject player = playerElem.getAsJsonObject();
+                            if (!player.has("brawler")) continue;
+                            JsonObject brawler = player.getAsJsonObject("brawler");
+
+                            if (brawler.has("name") && TARGET_BRAWLER.equals(brawler.get("name").getAsString())) {
+                                String gadget = brawler.has("gadgets") && brawler.getAsJsonArray("gadgets").size() > 0
+                                        ? brawler.getAsJsonArray("gadgets").get(0).getAsJsonObject().get("name").getAsString()
+                                        : "";
+                                String starpower = brawler.has("starPowers") && brawler.getAsJsonArray("starPowers").size() > 0
+                                        ? brawler.getAsJsonArray("starPowers").get(0).getAsJsonObject().get("name").getAsString()
+                                        : "";
+
+                                pstmt.setString(1, TARGET_BRAWLER);
+                                pstmt.setString(2, result);
+                                pstmt.setString(3, map);
+                                pstmt.setString(4, mode);
+                                pstmt.setString(5, gadget);
+                                pstmt.setString(6, starpower);
+                                pstmt.executeUpdate();
+                            }
+                        }
+                    }
+                }
+            }
+
+            pstmt.close();
+            dbConn.close();
+            System.out.println("‚úÖ Shelly Í≤ΩÍ∏∞ Ï†ïÎ≥¥Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.");
+
+        } catch (Exception e) {
+            System.out.println("‚ùå Ïò§Î•ò Î∞úÏÉù: " + e.getMessage());
+            e.printStackTrace();
+        }
+    }
+}
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
new file mode 100644
--- /dev/null	(date 1743488354986)
+++ b/.idea/gradle.xml	(date 1743488354986)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
+  <component name="GradleSettings">
+    <option name="linkedExternalProjectsSettings">
+      <GradleProjectSettings>
+        <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="gradleHome" value="" />
+        <option name="modules">
+          <set>
+            <option value="$PROJECT_DIR$" />
+          </set>
+        </option>
+      </GradleProjectSettings>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
--- /dev/null	(date 1743307595820)
+++ b/gradle/wrapper/gradle-wrapper.properties	(date 1743307595820)
@@ -0,0 +1,6 @@
+#Sun Mar 30 13:06:35 KST 2025
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-8.10-bin.zip
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
Index: settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/settings.gradle b/settings.gradle
new file mode 100644
--- /dev/null	(date 1743307591911)
+++ b/settings.gradle	(date 1743307591911)
@@ -0,0 +1,2 @@
+rootProject.name = 'capstonetest'
+
Index: gradlew.bat
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100644
--- /dev/null	(date 1743307595829)
+++ b/gradlew.bat	(date 1743307595829)
@@ -0,0 +1,89 @@
+@rem
+@rem Copyright 2015 the original author or authors.
+@rem
+@rem Licensed under the Apache License, Version 2.0 (the "License");
+@rem you may not use this file except in compliance with the License.
+@rem You may obtain a copy of the License at
+@rem
+@rem      https://www.apache.org/licenses/LICENSE-2.0
+@rem
+@rem Unless required by applicable law or agreed to in writing, software
+@rem distributed under the License is distributed on an "AS IS" BASIS,
+@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+@rem See the License for the specific language governing permissions and
+@rem limitations under the License.
+@rem
+
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Resolve any "." and ".." in APP_HOME to make it shorter.
+for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto execute
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto execute
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
new file mode 100644
--- /dev/null	(date 1743322793641)
+++ b/build.gradle	(date 1743322793641)
@@ -0,0 +1,20 @@
+plugins {
+    id 'java'
+}
+
+group = 'org.example'
+version = '1.0-SNAPSHOT'
+
+repositories {
+    mavenCentral()
+}
+
+dependencies {
+    implementation 'com.google.code.gson:gson:2.10.1' // JSON ÌååÏã±Ïö©
+    implementation 'mysql:mysql-connector-java:8.0.33' // MySQL ÎìúÎùºÏù¥Î≤Ñ
+}
+
+
+test {
+    useJUnitPlatform()
+}
\ No newline at end of file
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(date 1743307591992)
+++ b/.gitignore	(date 1743307591992)
@@ -0,0 +1,42 @@
+.gradle
+build/
+!gradle/wrapper/gradle-wrapper.jar
+!**/src/main/**/build/
+!**/src/test/**/build/
+
+### IntelliJ IDEA ###
+.idea/modules.xml
+.idea/jarRepositories.xml
+.idea/compiler.xml
+.idea/libraries/
+*.iws
+*.iml
+*.ipr
+out/
+!**/src/main/**/out/
+!**/src/test/**/out/
+
+### Eclipse ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+bin/
+!**/src/main/**/bin/
+!**/src/test/**/bin/
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+
+### VS Code ###
+.vscode/
+
+### Mac OS ###
+.DS_Store
\ No newline at end of file
Index: gradlew
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradlew b/gradlew
new file mode 100644
--- /dev/null	(date 1743307595826)
+++ b/gradlew	(date 1743307595826)
@@ -0,0 +1,234 @@
+#!/bin/sh
+
+#
+# Copyright ¬© 2015-2021 the original authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+##############################################################################
+#
+#   Gradle start up script for POSIX generated by Gradle.
+#
+#   Important for running:
+#
+#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
+#       noncompliant, but you have some other compliant shell such as ksh or
+#       bash, then to run this script, type that shell name before the whole
+#       command line, like:
+#
+#           ksh Gradle
+#
+#       Busybox and similar reduced shells will NOT work, because this script
+#       requires all of these POSIX shell features:
+#         * functions;
+#         * expansions ¬´$var¬ª, ¬´${var}¬ª, ¬´${var:-default}¬ª, ¬´${var+SET}¬ª,
+#           ¬´${var#prefix}¬ª, ¬´${var%suffix}¬ª, and ¬´$( cmd )¬ª;
+#         * compound commands having a testable exit status, especially ¬´case¬ª;
+#         * various built-in commands including ¬´command¬ª, ¬´set¬ª, and ¬´ulimit¬ª.
+#
+#   Important for patching:
+#
+#   (2) This script targets any POSIX shell, so it avoids extensions provided
+#       by Bash, Ksh, etc; in particular arrays are avoided.
+#
+#       The "traditional" practice of packing multiple parameters into a
+#       space-separated string is a well documented source of bugs and security
+#       problems, so this is (mostly) avoided, by progressively accumulating
+#       options in "$@", and eventually passing that to Java.
+#
+#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
+#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
+#       see the in-line comments for details.
+#
+#       There are tweaks for specific operating systems such as AIX, CygWin,
+#       Darwin, MinGW, and NonStop.
+#
+#   (3) This script is generated from the Groovy template
+#       https://github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
+#       within the Gradle project.
+#
+#       You can find Gradle at https://github.com/gradle/gradle/.
+#
+##############################################################################
+
+# Attempt to set APP_HOME
+
+# Resolve links: $0 may be a link
+app_path=$0
+
+# Need this for daisy-chained symlinks.
+while
+    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
+    [ -h "$app_path" ]
+do
+    ls=$( ls -ld "$app_path" )
+    link=${ls#*' -> '}
+    case $link in             #(
+      /*)   app_path=$link ;; #(
+      *)    app_path=$APP_HOME$link ;;
+    esac
+done
+
+APP_HOME=$( cd "${APP_HOME:-./}" && pwd -P ) || exit
+
+APP_NAME="Gradle"
+APP_BASE_NAME=${0##*/}
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD=maximum
+
+warn () {
+    echo "$*"
+} >&2
+
+die () {
+    echo
+    echo "$*"
+    echo
+    exit 1
+} >&2
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "$( uname )" in                #(
+  CYGWIN* )         cygwin=true  ;; #(
+  Darwin* )         darwin=true  ;; #(
+  MSYS* | MINGW* )  msys=true    ;; #(
+  NONSTOP* )        nonstop=true ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD=$JAVA_HOME/jre/sh/java
+    else
+        JAVACMD=$JAVA_HOME/bin/java
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD=java
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
+    case $MAX_FD in #(
+      max*)
+        MAX_FD=$( ulimit -H -n ) ||
+            warn "Could not query maximum file descriptor limit"
+    esac
+    case $MAX_FD in  #(
+      '' | soft) :;; #(
+      *)
+        ulimit -n "$MAX_FD" ||
+            warn "Could not set maximum file descriptor limit to $MAX_FD"
+    esac
+fi
+
+# Collect all arguments for the java command, stacking in reverse order:
+#   * args from the command line
+#   * the main class name
+#   * -classpath
+#   * -D...appname settings
+#   * --module-path (only if needed)
+#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.
+
+# For Cygwin or MSYS, switch paths to Windows format before running java
+if "$cygwin" || "$msys" ; then
+    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
+    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )
+
+    JAVACMD=$( cygpath --unix "$JAVACMD" )
+
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    for arg do
+        if
+            case $arg in                                #(
+              -*)   false ;;                            # don't mess with options #(
+              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
+                    [ -e "$t" ] ;;                      #(
+              *)    false ;;
+            esac
+        then
+            arg=$( cygpath --path --ignore --mixed "$arg" )
+        fi
+        # Roll the args list around exactly as many times as the number of
+        # args, so each arg winds up back in the position where it started, but
+        # possibly modified.
+        #
+        # NB: a `for` loop captures its iteration list before it begins, so
+        # changing the positional parameters here affects neither the number of
+        # iterations, nor the values presented in `arg`.
+        shift                   # remove old arg
+        set -- "$@" "$arg"      # push replacement arg
+    done
+fi
+
+# Collect all arguments for the java command;
+#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of
+#     shell script including quotes and variable substitutions, so put them in
+#     double quotes to make sure that they get re-expanded; and
+#   * put everything else in single quotes, so that it's not re-expanded.
+
+set -- \
+        "-Dorg.gradle.appname=$APP_BASE_NAME" \
+        -classpath "$CLASSPATH" \
+        org.gradle.wrapper.GradleWrapperMain \
+        "$@"
+
+# Use "xargs" to parse quoted args.
+#
+# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
+#
+# In Bash we could simply go:
+#
+#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
+#   set -- "${ARGS[@]}" "$@"
+#
+# but POSIX shell has neither arrays nor command substitution, so instead we
+# post-process each arg (as a line of input to sed) to backslash-escape any
+# character that might be a shell metacharacter, then use eval to reverse
+# that process (while maintaining the separation between arguments), and wrap
+# the whole thing up as a single "set" statement.
+#
+# This will of course break if any of these variables contains a newline or
+# an unmatched quote.
+#
+
+eval "set -- $(
+        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
+        xargs -n1 |
+        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
+        tr '\n' ' '
+    )" '"$@"'
+
+exec "$JAVACMD" "$@"
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1743307601301)
+++ b/.idea/.gitignore	(date 1743307601301)
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
